<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">


  <!-- 
      Spring 也提供一套自己的 MVCFrmaework。相對於 Struts、WebWork 等 MVCFramework、Spring 的 MVC 顯得小巧而靈活，實現的機制也是完全不同。
      對於某些應用，Spring MVC 也是不錯的選擇。
    
  
      Spring 是一個輕量級的容器 Framework 。它能以 IoC 、AOP 的形式管理， Struts、Hibernate、Web Service 、JSF 等眾多的 Framework ，
      減少程式碼之間的耦合。使用Spring後，程式變得靈活，各個模組像外掛一樣隨意設定，在不改變程式碼的情況下隨意增加。
      
      
  
  
      
      
    
      ORM 模組對 Hibernate、JDO、TopLink、iBatis 等 ORMFramework 提供支援。
      本節以 Hibernate 為例介紹 ORM 模組。 Spring 支援的 ORM 方式類似於對 JDBC 的支援，
      例如在 DAO 層提供 HibernateDaoSupport 類別與 HibernateTemplate 類別。
     
      ORM 查組相依於 dom4j-1.6.jar 、antlr.jar、MyEclipse 附帶的 Spring ORM 類別函式庫可能沒有這兩個類別函式庫，需要自己增加。


      Spring 對流行的 ORMFramework 如 TopLink、JDO、iBatis 都提供了支援，
      把具有不同的 API 的各種 ORM 封裝為形如 XxxDaoSupport、XxxTemplate 等統一的 Spring API，
 　　 使用 XxxTransactionManager 進行交易管理。例如 TopLinkDaoSupport、TopLinkTemplate、TopLinkTransactionManager等。
 　　 它們的用法是類似的，設定也相似。
 
 
      Spring ORM 模組對市面上的 ORMFramework 如 Hiberante 等進行了封裝。 Spring 能夠管理、維護 Hibernate 。
      使用時可直接繼承 HiberanteDaoSupport 類別，該類別內建一個 HibernateTemplate 物件。Hibernate 的設定也轉移到 Spring 設定檔中。
     


    
    
    

          
      ※此設定檔的說明：
     
      CatServiceImpl 實現了ICatService 介面。程式碼中定了一個 DAO 類型屬性，以及 getter、setter 方法。
      Spring 將透過 getter、setter 方法注射在 DAO 物件。Service 層透過 DAO 物件實現業務邏輯。
      DAO 層：負責資料的儲存、儲存;
      Service 層：負責檢查資料的完整性，例如檢查是否重名等;
     
  -->




  <!-- 資料庫連線設定 -->
  <bean id="ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
    <property name="driverClassName"    value="com.mysql.jdbc.Driver"                                             />
    <property name="url"                value="jdbc:mysql://localhost:3306/spring2_mvc"                           />
    <property name="username"           value="root"                                                              />
    <property name="password"           value="19786779"                                                          />
  </bean>
  
  
  
  <!--  Hibernate SessionFactory 實現類別  -->
  <bean id="sessionFactoryBean" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" destroy-method="destroy" >
    
    
    <!-- 資料庫 -->
    <property name="dataSource" ref="ds" />
    
    
    <!-- 該 Package 下所有類別都會被當作實體類別表載入  -->
    <property name="annotatedPackages"  value="classpath:/com/framework/spring/orm/annotated"  /> 
    
      
    <!-- 載入所設定實體類別 -->
    <property name="annotatedClasses" >
      <list>
        <value>com.framework.spring.orm.entity.Cat</value>  <!-- 設定 Cat 類別 -->
      </list>
    </property>
    
      
    <!-- Hibernate 屬性 -->
    <property name="hibernateProperties" >
      <props>
        <prop key="hibernate.dialect" >org.hibernate.dialect.MySQLDialect</prop>  <!-- SQL 方言 -->
        <prop key="hibernate.show_sql" >true</prop>                               <!-- 輸出 SQL 敘述 -->
        <prop key="hibernate.format_sql" >true</prop>                             <!-- 格式化 SQL 敘述  -->
        <prop key="hibernate.hbm2ddl.auto" >create</prop>                         <!-- 建立表結構，(create 策略自動建立資料庫指令碼)  -->
      </props>
    </property>
   
  </bean>
  
  
  
  <!-- Hibernate 交易管理器 -->
  <bean id="hibernateTransactionManagerBean" class="org.springframework.orm.hibernate3.HibernateTransactionManager" >
    <property name="sessionFactory" ref="sessionFactoryBean" />
  </bean>
  
  
  <!-- Hibernate 交易管理規則 -->
  <bean id="hibernateTransactionAttributeSourceBean" class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource" >
    <property name="properties" >
      <props>
        <prop key="*" >PROPAGATION_REQUIRED</prop>   <!-- 交易類型：所有方法都加交易 -->
      </props>
    </property>
  </bean>




  <!-- 
      在 Spring 裡，Hiberate 的資源要交給 Spring 管理。Hibernate 及其 SessionFactory 等只是 Spring 一個特殊的 Bean ，
    由 Spring 負責產生實體與銷毀。因此，DAO 層只要繼承 org.springframework.orm.hibernate3.support.HibernateDaoSupport ，
    而不需要與 Hibernate 的 API 打交道，不需要開啟、關閉 Hibernate 的 Session、Transaction 、Spring 會自動維護這些物件。
  -->
  <!-- Cat DAO 物件 -->
  <bean id="catDAOBean" class="com.framework.spring.orm.dao.impl.CatDAOImpl" >
    <property name="sessionFactory" ref="sessionFactoryBean" />     <!-- 設定 SessionFactory 實現類別   -->
  </bean>





  <!-- 
     增加 Service 層後，需要在 Service 上加上交易。這裡使用 Spring 提供的設定交易管理。
     先定義一個 org.springframework.orm.hibernate3.HibernateTransactionManager 管理器，
     然後把該管理器設定到 Service 程式碼的代理類別上 (CatServiceImpl 不能直接交易，需借助 Spring 代理類別)。
     把 CatDaoImpl 設定交易管理的物件。
  -->
  <!-- 交易工廠代理類別 -->
  <bean id="catServiceBean" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" >
    
    <!-- 設定交易管理 -->
    <property name="transactionManager"  ref="hibernateTransactionManagerBean" />
    
    
    <!-- 設定交易管理規則 -->
    <property name="transactionAttributeSource"  ref="hibernateTransactionAttributeSourceBean" />
    
    
    <!-- 被管理的物件，匿名 Bean -->
    <property name="target" >
       <bean class="com.framework.spring.orm.service.impl.CatServiceImpl" >
         <property name="catDAO" ref="catDAOBean" />
       </bean>  
    </property>
  
  </bean>
  
  




</beans>